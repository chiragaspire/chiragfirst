{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","useHistory","useRouteMatch","commentTextRef","useRef","onAddedComment","quoteId","useHttp","addComment","sendRequest","status","error","useEffect","current","value","submitFormHandler","event","preventDefault","enteredText","commentData","form","onSubmit","LoadingSpinner","control","htmlFor","required","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","params","useParams","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","console","log","length","addedCommentHandler","useCallback","onClick","QuoteDetail","match","getSingleQuote","loadedQuotes","path","exact","to","url"],"mappings":"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","file":"static/js/3.2c58f5b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect, useRef } from 'react';\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nconst NewCommentForm = (props) => {\n  const history = useHistory();\n  const match = useRouteMatch();\n  const commentTextRef = useRef();\n\n  const { onAddedComment, quoteId } = props;\n  \n  const { sendRequest, status, error } = useHttp(\n    addComment\n  );\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      commentTextRef.current.value = '';\n      onAddedComment();\n      \n    }\n    \n  }, [status, error, onAddedComment]);\n \n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n      commentData: { text: enteredText } ,\n      quoteId :  quoteId \n    });\n    \n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n     { status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div >)\n  }\n\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea required id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState,useEffect,useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\nconst Comments = () => {\n  const params = useParams();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(\n    getAllComments\n  );\n\n  useEffect(() => {\n    sendRequest(quoteId)\n  }, [quoteId]);\n  console.log(status)\n  let comments;\n  if (status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div >\n    )\n  }\n  if (status === 'completed' && loadedComments.length>0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (status === 'completed' && !loadedComments && loadedComments.length===0) {\n    comments =  <p className='centered'>No Comments were added yet!</p>\n  \n  }\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  },[sendRequest,quoteId]);\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from 'react';\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom';\n\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport Comments from '../components/comments/Comments';\n\nimport useHttp from '../hooks/use-http';\nimport { getSingleQuote } from '../lib/api';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nconst QuoteDetail = () => {\n  const params = useParams();\n  const match = useRouteMatch();\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedQuotes, error } = useHttp(\n    getSingleQuote,\n    true\n  );\n  useEffect(() => {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId]);\n  if (status === 'pending') {\n    return (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div >\n    );\n  }\n  if (error) {\n    return <p className='centered focused' >{error}</p>\n  }\n  if (!loadedQuotes.text) {\n    return <p>No quote found!</p>;\n  }\n  console.log(match);\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuotes.text} author={loadedQuotes.author} />\n      <Route path={`${match.path}`} exact>\n        <div className='centered'>\n          <Link className='btn--flat' to={`${match.url}/comments`} >\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}